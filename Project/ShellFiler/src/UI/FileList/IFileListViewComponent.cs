using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Windows.Forms;
using ShellFiler.Document;
using ShellFiler.Api;
using ShellFiler.Command.FileList;
using ShellFiler.Command.FileList.Mouse;
using ShellFiler.Document.Setting;
using ShellFiler.FileTask.Condition;
using ShellFiler.FileSystem;

namespace ShellFiler.UI.FileList {

    //=========================================================================================
    // クラス：ファイル一覧の描画やUI操作を切り替えて使用するための制御インターフェース
    //=========================================================================================
    public interface IFileListViewComponent {

        //=========================================================================================
        // 機　能：初期化する
        // 引　数：[in]fileListView 親となるファイル一覧ビュー
        // 　　　　[in]viewState    ビューの初期状態
        // 戻り値：なし
        //=========================================================================================
        void Initialize(FileListView fileListView, IFileListViewState viewState);

        //=========================================================================================
        // 機　能：ビューの後始末を行う
        // 引　数：なし
        // 戻り値：なし
        //=========================================================================================
        void DisposeView();

        //=========================================================================================
        // 機　能：ディレクトリ一覧をリフレッシュしたときの処理を行う
        // 引　数：[in]chdirParam  ディレクトリ変更のパラメータ
        // 戻り値：なし
        //=========================================================================================
        void OnRefreshDirectory(ChangeDirectoryParam chdirParam);
        
        //=========================================================================================
        // 機　能：UIのビューの状態を読み込む
        // 引　数：[in]viewState   ビューの状態の読み込み元
        // 戻り値：なし
        //=========================================================================================
        void LoadComponentViewState(IFileListViewState viewState);

        //=========================================================================================
        // 機　能：UIのビューの状態を保存する
        // 引　数：なし
        // 戻り値：ビューの状態
        //=========================================================================================
        IFileListViewState SaveComponentViewState();

        //=========================================================================================
        // 機　能：ビューモードを変更する
        // 引　数：[in]viewMode   ビューモード
        // 戻り値：なし
        //=========================================================================================
        void RefreshViewMode(FileListViewMode viewMode);

        //=========================================================================================
        // 機　能：サイズ変更時の処理を行う
        // 引　数：なし
        // 戻り値：なし
        //=========================================================================================
        void OnSizeChange();
        
        //=========================================================================================
        // 機　能：ファイルのスプリットの位置が更新されたときの処理を行う
        // 引　数：なし
        // 戻り値：なし
        //=========================================================================================
        void OnSplitChanged();

        //=========================================================================================
        // 機　能：画面を描画する
        // 引　数：[in]g    グラフィックス
        // 戻り値：なし
        //=========================================================================================
        void OnPaint(Graphics g);

        //=========================================================================================
        // 機　能：アイコンを描画する
        // 引　数：[in]index  描画するファイルのインデックス
        // 戻り値：なし
        //=========================================================================================
        void DrawFileIcon(int index);

        //=========================================================================================
        // 機　能：垂直スクロールイベントを処理する
        // 引　数：[in]evt  スクロールイベント
        // 戻り値：なし
        //=========================================================================================
        void OnVScroll(ScrollEventArgs evt);

        //=========================================================================================
        // 機　能：水平スクロールイベントを処理する
        // 引　数：[in]evt  スクロールイベント
        // 戻り値：なし
        //=========================================================================================
        void OnHScroll(ScrollEventArgs evt);

        //=========================================================================================
        // 機　能：マウスホイールイベントを処理する
        // 引　数：[in]evt  マウスイベント
        // 戻り値：なし
        //=========================================================================================
        void OnMouseWheel(MouseEventArgs evt);

        //=========================================================================================
        // 機　能：機能を実行する
        // 引　数：[in]cmd      マウス操作中のコマンド
        // 戻り値：実行結果
        //=========================================================================================
        void OnMouseDown(AbstractMouseActionCommand cmd);
        
        //=========================================================================================
        // 機　能：マウスが移動したときの処理を行う
        // 引　数：[in]cmd      マウス操作中のコマンド
        // 戻り値：なし
        //=========================================================================================
        void OnMouseMove(AbstractMouseActionCommand cmd);

        //=========================================================================================
        // 機　能：マウスのボタンが離されたときの処理を行う
        // 引　数：[in]cmd      マウス操作中のコマンド
        // 戻り値：なし
        //=========================================================================================
        void OnMouseUp(AbstractMouseActionCommand cmd);

        //=========================================================================================
        // 機　能：ドラッグ開始のマウス位置かどうかを調べる
        // 引　数：[in]mouseX  マウスのX位置
        // 　　　　[in]mouseY  マウスのY位置
        // 戻り値：ドラッグ開始位置のときtrue
        //=========================================================================================
        bool CheckDragStartPosition(int mouseX, int mouseY);

        //=========================================================================================
        // 機　能：ドラッグ＆ドロップを開始する
        // 引　数：[in]mouseX  マウスのX位置
        // 　　　　[in]mouseY  マウスのY位置
        // 戻り値：なし
        //=========================================================================================
        void BeginDragDrop(int mouseX, int mouseY);

        //=========================================================================================
        // 機　能：カーソルを上に移動する
        // 引　数：[in]lines    移動する行数
        // 　　　　[in]withMark マーク付きで移動するかどうか（Revert以外が有効）
        // 戻り値：新しいカーソルの位置
        //=========================================================================================
        int CursorUp(int lines, MarkOperation withMark);

        //=========================================================================================
        // 機　能：カーソルを下に移動する
        // 引　数：[in]lines    移動する行数
        // 　　　　[in]withMark マーク付きで移動するかどうか（Revert以外が有効）
        // 戻り値：新しいカーソルの位置
        //=========================================================================================
        int CursorDown(int lines, MarkOperation withMark);
        
        //=========================================================================================
        // 機　能：カーソルを左に移動する
        // 引　数：[in]toggleWin  ウィンドウの切り替えを行うときtrue
        // 　　　　[in]withMark   マーク付きで移動するかどうか（Revert以外が有効）
        // 戻り値：新しいカーソルの位置（ウィンドウ切り替えの操作を行ったとき-1）
        //=========================================================================================
        int CursorLeft(bool toggleWin, MarkOperation withMark);

        //=========================================================================================
        // 機　能：カーソルを右に移動する
        // 引　数：[in]toggleWin  ウィンドウの切り替えを行うときtrue
        // 　　　　[in]withMark   マーク付きで移動するかどうか（Revert以外が有効）
        // 戻り値：新しいカーソルの位置（ウィンドウ切り替えの操作を行ったとき-1）
        //=========================================================================================
        int CursorRight(bool toggleWin, MarkOperation withMark);
        
        //=========================================================================================
        // 機　能：カーソルを左右に移動する
        // 引　数：[in]toggleWin  ウィンドウの切り替えを行うときtrue
        // 　　　　[in]withMark   マーク付きで移動するかどうか（Revert以外が有効）
        // 戻り値：新しいカーソルの位置（ウィンドウ切り替えの操作を行ったとき-1）
        //=========================================================================================
        int CursorLeftRight(bool toggleWin, MarkOperation withMark);
        
        //=========================================================================================
        // 機　能：カーソルを次のファイルに移動する
        // 引　数：なし
        // 戻り値：なし
        //=========================================================================================
        void CursorNext();

        //=========================================================================================
        // 機　能：ファイルまたはディレクトリをマークする
        // 引　数：[in]stay  カーソル位置を保持するときtrue
        // 戻り値：新しいマークの状態
        //=========================================================================================
        bool Mark(bool stay);

        //=========================================================================================
        // 機　能：指定された名前のファイルをマークする
        // 引　数：[in]targetFileList ファイル名の一覧
        // 　　　　[in]markOpr        マークに対する操作
        // 戻り値：すべてのファイルをマークできたときtrue
        //=========================================================================================
        bool MarkSpecifiedFile(List<string> targetFileList, MarkOperation markOpr);

        //=========================================================================================
        // 機　能：すべてのオブジェクトのマーク状態を変更する
        // 引　数：[in]markMode   マークの方法
        // 　　　　[in]updateUI   UIの更新も行うときtrue
        // 　　　　[in]condition  マークする条件（条件がないときnull） 
        // 戻り値：マーク状態を変更したオブジェクトの数
        //=========================================================================================
        int MarkAllFile(MarkAllFileMode markMode, bool updateUI, CompareCondition condition);
  
        //=========================================================================================
        // 機　能：ファイルをインクリメンタルサーチする
        // 引　数：[in]searchText  検索文字列
        // 　　　　[in]fromHead    ファイル名の先頭から比較するときtrue
        // 　　　　[in]operation   ファイル操作の種類
        // 戻り値：検索にヒットしたときtrue、見つからないとき/これ以上操作できないときfalse
        //=========================================================================================
        bool IncrementalSearch(string searchText, bool fromHead, IncrementalSearchOperation operation);

        //=========================================================================================
        // 機　能：ファイル一覧中の指定された行にカーソルを移動する
        // 引　数：[in]index  移動先ファイルのインデックス
        // 戻り値：なし
        //=========================================================================================
        void MoveCursorLine(int index);

        //=========================================================================================
        // 機　能：コンテキストメニューを表示する
        // 引　数：[in]fileName    対象のファイル名
        // 　　　　[in]menuPos     メニューを表示する位置
        // 戻り値：なし
        //=========================================================================================
        void ContextMenuImpl(string fileName, ContextMenuPosition menuPos);

        //=========================================================================================
        // 機　能：エクスプローラメニュー表示中のとき、メッセージを中継する
        // 引　数：[in]message    ウィンドウメッセージ
        // 　　　　[in]wParam     ウィンドウメッセージのパラメータ
        // 　　　　[in]lParam     ウィンドウメッセージのパラメータ
        // 戻り値：なし
        //=========================================================================================
        void HandleExplorerMenuMessage(int message, IntPtr wParam, IntPtr lParam);

        //=========================================================================================
        // 機　能：状態一覧パネルのアクティブ状態を設定する
        // 引　数：[in]isActive  状態一覧パネルがアクティブになったときtrue
        // 戻り値：なし
        //=========================================================================================
        void OnActivateStateListPanel(bool isActive);

        //=========================================================================================
        // プロパティ：画面に完全に表示できる行数
        //=========================================================================================
        int CompleteScreenLineSize {
            get;
        }

        //=========================================================================================
        // プロパティ：カーソル行（先頭行=0、1,2,3,…Files.Length-1）
        //=========================================================================================
        int CursorLineNo {
            get;
        }

        //=========================================================================================
        // プロパティ：水平スクロールバーの位置
        //=========================================================================================
        int HorzScrollPosition {
            get;
        }
    }
}
